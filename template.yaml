AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  S3UploaderDemo

  Sample SAM Template for S3UploaderDemo
  
Parameters:
  S3BucketName:
    Type: String
    Default: s3-upload-demo-s3-bucket
  DynamoDBTableName:
    Type: String
    Default: s3-upload-demo-dynamo-table

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    BinaryMediaTypes:
    - "image~1*"
  Function:
    Timeout: 60
    Environment:
      Variables:
        S3_BUCKET: !Ref S3BucketName
        DYNAMODB_TABLE: !Ref DynamoDBTableName

Resources:
  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postS3.handler
      Runtime: nodejs10.x
      Policies:
      - AWSLambdaExecute # Managed Policy
      - Version: '2012-10-17' # Policy Document
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - !Ref S3BucketName
              - "/*"
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /upload
            Method: post

#  HelloWorldFunction:
#    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#    Properties:
#      CodeUri: hello-world/
#      Handler: app.lambdaHandler
#      Runtime: nodejs10.x
#      Events:
#        HelloWorld:
#          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#          Properties:
#            Path: /hello
#            Method: get

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  S3UploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: "upload-function-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3BucketName
                - "/*"

Outputs:
  UploadApi:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload"
  S3Bucket:
    Value: !Ref S3Bucket
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
